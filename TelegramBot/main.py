import telebot
from telebot import types
import botsetting as bs
from prediction import get_visual_prediction
from analytics import *
from ConversationChoice import *
import os
import random
import re

bot = telebot.TeleBot(bs.config['token'])

def validate_user_input(input_string):
    pattern = re.compile(r'^\d{4},.*\w+$')
    return  pattern.match(input_string)

def validate_input_for_flaps(user_input):
    pattern = re.compile(r'^\d{4},\s*\w+,\s*\d+,\s*\d+$')
    return pattern.match(user_input)

def get_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", callback_data= "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    button2 = types.InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data= '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
    button3 = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='–ü–æ–º–æ—â—å')
    keyboard.add(button1, button2, button3)
    return keyboard

def process_points_input(message):
    if not validate_user_input(message.text):
        text = random.choice(not_validate_input)
        bot.send_message(message.chat.id, text, parse_mode='html')
        bot.register_next_step_handler(message, process_points_input)
    else:
        text = random.choice(information_research)
        bot.send_message(message.chat.id, text, parse_mode='html')
        text = message.text.split(', ')
        year, granprix = int(text[0]), text[1]
        output = get_visual_prediction(year, granprix)
        if output == -1:
            bot.send_message(message.chat.id, random.choice(lack_of_data), parse_mode='html')
        else:
            bot.send_photo(message.chat.id, photo=open(output, 'rb'))
            os.remove(output)
        keyboard = get_keyboard()
        bot.send_message(message.chat.id, '–ß—Ç–æ –¥–∞–ª—å—à–µ?)', parse_mode='html', reply_markup=keyboard)

def import_pole(message):
    output = importancepole(message.text)
    if output != -1:
        bot.send_message(message.chat.id, '–ù–∞ –¥–∞–Ω–Ω–æ–π —Ç—Ä–∞—Å—Å–µ, –ø–æ–±–µ–∂–¥–∞–ª–∏ —Å –ø–æ—É–ª –ø–æ–∑–∏—Ü–∏–∏ –≤ ' + str(output) + '% —Å–ª—É—á–∞–µ–≤', parse_mode='html')
    else:
        bot.send_message(message.chat.id, random.choice(lack_of_data), parse_mode='html')
    
    keyboard = get_keyboard()
    bot.send_message(message.chat.id, '–ß—Ç–æ –¥–∞–ª—å—à–µ?)', parse_mode='html', reply_markup=keyboard)

def compare_fasterslaps(message):
    if not validate_input_for_flaps(message.text):
        text = random.choice(not_validate_input)
        bot.send_message(message.chat.id, text, parse_mode='html')
        bot.register_next_step_handler(message, compare_fasterslaps)
    else:
        text = random.choice(information_research)
        bot.send_message(message.chat.id, text, parse_mode='html')
        text = message.text.split(', ')
        year, granprix, driver_1, driver_2 = int(text[0]), text[1], text[2], text[3]
        output = comparefastestlaps(year, granprix ,driver_1, driver_2)
        if output == -1:
            bot.send_message(message.chat.id, random.choice(lack_of_data), parse_mode='html')
        else:
            bot.send_photo(message.chat.id, photo=open(output, 'rb'))
            os.remove(output)
        keyboard = get_keyboard()
        bot.send_message(message.chat.id, '–ß—Ç–æ –¥–∞–ª—å—à–µ?)', parse_mode='html', reply_markup=keyboard)

@bot.message_handler(commands=['help'])
def help(message):
    keyboard = get_keyboard()
    bot.send_message(message.chat.id, '–¢–∞–∫-—Ç–∞–∫, —è –º–æ–≥—É:', parse_mode='html', reply_markup=keyboard)

@bot.message_handler(commands=['start'])
def start(message):
    keyboard = get_keyboard()
    out_text = '{hello}\n<b>{user_name}</b> –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ {bot_name}\n–Ø –≤–∞—à –≤–µ—Ä–Ω—ã–π –¥—Ä—É–≥ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–æ—Ä–º—É–ª–µ 1'.format(
        hello=random.choice(hello_say),
        user_name=message.from_user.first_name,
        bot_name=bs.config['name'])
    bot.send_message(message.chat.id, out_text, parse_mode='html')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
        points(call.message)
    elif call.data == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        analysis(call.message)
    elif call.data == '–ü–æ–º–æ—â—å':
        help(call.message)

@bot.message_handler(commands=['points'])
def points(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≥–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2023, Imola")
    bot.register_next_step_handler(message, process_points_input)


@bot.message_handler(commands=['analysis'])
def analysis(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–í–∞–∂–Ω–æ—Å—Ç—å –ø–æ—É–ª –ø–æ–∑–∏—Ü–∏–∏üìà")
    button2 = types.KeyboardButton("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –∫—Ä—É–≥–æ–≤üí•")
    keyboard.add(button1, button2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: True)
def handle_button_click(message):
    remove_keyboard = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(message.chat.id, "–ß—Ç–æ –∂ –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º...", reply_markup=remove_keyboard)
    if message.text == "–í–∞–∂–Ω–æ—Å—Ç—å –ø–æ—É–ª –ø–æ–∑–∏—Ü–∏–∏üìà":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–∞–Ω–Ω–∞ —Ç—Ä–∞—Å—Å–∞")
        bot.register_next_step_handler(message, import_pole)
    elif message.text == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –∫—Ä—É–≥–æ–≤üí•":
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≥–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –Ω–æ–º–µ—Ä–∞ –≥–æ–Ω—â–∏–∫–æ–≤\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2023, Imola, 16, 55\n")
        bot.register_next_step_handler(message, compare_fasterslaps)

@bot.message_handler(content_types=['text'])
def text(message):
    text = '–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é'
    bot.send_message(message.chat.id, text, parse_mode='html')
    keyboard = get_keyboard()
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É', parse_mode='html', reply_markup=keyboard)


bot.polling(non_stop=True, interval=0)